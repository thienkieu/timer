#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sse:server');
var http = require('http');
var request = require('request');
var winston = require('winston');
require('winston-mongodb').Mongo;

var db = require('../db');
var trackingConnectionCollection = db.trakingCollection;
var dbConnectionUrl = db.connectionUrl;

var logger = require('../logger');

  
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
setInterval(function(){
  let connectDate = new Date();
  let connectTimestamp = connectDate.getTime();
  // log server runing time to get exam disconnect when server down.
  logger.log('info', '=========server runing at time:=======================' + connectTimestamp);
}, 300000);

const io = require('socket.io')(server, {
	serveClient: false,
	pingInterval: 15000,
	pingTimeout: 5000,
	cookie: false
});

io.on('connection', function(client) { 
	
	
	let token = client.handshake.query.infor;
	const candidateId = client.handshake.query.candidateId;
	let connectDate = new Date();
	let connectTimestamp = connectDate.getTime();

	const data = {
		userToken: token,
		type: 'connect',
		connectTime: connectTimestamp,
		candidateId: candidateId,
  };
  
  logger.log('info', '=========connection=======================' + JSON.stringify(data));

	if (trackingConnectionCollection){
		trackingConnectionCollection().insertOne(data);
	}
	
	client.on('disconnect', function (reason) {
	
		let disconnectDate = new Date();
		let disconnectTimestamp = disconnectDate.getTime();

		const data = {
			userToken: token,
			type: 'disconnect',
			connectTime: disconnectTimestamp,
			reason: reason,
			candidateId: candidateId,
    };
    logger.log('info', '=========disconnect=======================' + JSON.stringify(data));

		if (trackingConnectionCollection){
			trackingConnectionCollection().insertOne(data);
		}
	 });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sse:server');
var http = require('http');
var request = require('request');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require('socket.io')(server, {
	serveClient: false,
	pingInterval: 15000,
	pingTimeout: 5000,
	cookie: false
});

const lstTokenConnect = {};
io.on('connection', function(client) { 
	let token = client.handshake.query.infor;
	const previousUpdateTime = lstTokenConnect[token];
	clearInterval(previousUpdateTime);
	
	const updateTimeoutInterval = setInterval(() => {
        request.post({
			url: 'http://backend.onlinetest.logigear.com/coordinator/exam/updateTimeout',
			method: "POST",
			headers: {
				Authorization: "Bearer "+token,
			},
		}, function (error, response, body1) {
			//console.log('http://backend.onlinetest.com/coordinator/exam/updateTimeout');
			//console.log(body1);
		});
		
    }, 15000);
	lstTokenConnect[token] = updateTimeoutInterval;
		
	//console.log('=========connection=======================');
	client.on('disconnect', function (reason) {
		
		//console.log('=====================disconnect=============================================');
		//console.log(reason);
		//console.log(token);		
		
		request.post({
			url: 'http://backend.onlinetest.logigear.com/coordinator/exam/updateDisconnect',
			method: "POST",
			body: JSON.stringify({
				reason,
			}),
			headers: {
				Authorization: "Bearer "+token,
				'content-type': 'application/json',
			},
		}, function (error, response, body1) {
			console.log('http://backend.onlinetest.logigear.com/coordinator/exam/updateDisconnect');
			console.log(body1);
		});
		
		
		clearInterval(updateTimeoutInterval);
	 });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
